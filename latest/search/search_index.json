{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"Pydantic Units <p>Support for OpenMM units as pydantic fields</p> <p> </p> <p>The <code>pydantic-units</code> framework aims to offer a convenient way to work with OpenMM units in Pydantic models, in a way that is backwards compatible with both Pydantic v1 and v2.</p>"},{"location":"#installation","title":"Installation","text":"<p>This package can be installed using <code>conda</code> (or <code>mamba</code>, a faster version of <code>conda</code>):</p> <pre><code>mamba install -c conda-forge pydantic-units\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The <code>OpenMMQuantity</code> class can be used as a field in a Pydantic model to represent a quantity with units. It will both handle parsing quantities with units from strings and checking that parsed units are compatible with the expected units.</p>"},{"location":"#pydantic-v1","title":"Pydantic V1","text":"<p>Due to limitations of custom fields in Pydantic v1, v1 models must define a custom JSON encoder if the model needs to be serialised to JSON:</p> <pre><code>from pydantic import BaseModel\nfrom openmm.unit import Quantity, angstrom, nanometer\n\nfrom pydantic_units import OpenMMQuantity, quantity_serializer\n\nclass Model(BaseModel):\n    class Config:\n        json_encoders = {Quantity: quantity_serializer}\n\n    a: OpenMMQuantity[angstrom]\n    b: OpenMMQuantity[nanometer]\n\nmodel = Model(a='1.0 angstrom', b='1.0 nm')\nmodel.json()\n# '{\"a\": \"1.0 angstrom\", \"b\": \"1.0 nm\"}'\n</code></pre>"},{"location":"#pydantic-v2","title":"Pydantic V2","text":"<p>Pydantic v2 supports custom fields with custom encoders, so the <code>OpenMMQuantity</code> field can be used directly in the model:</p> <pre><code>from pydantic import BaseModel\nfrom openmm.unit import angstrom, nanometer\n\nfrom pydantic_units import OpenMMQuantity\n\nclass Model(BaseModel):\n    a: OpenMMQuantity[angstrom]\n    b: OpenMMQuantity[nanometer]\n\nmodel = Model(a='1.0 angstrom', b='1.0 nm')\n# OR\nmodel = Model(a=1.0 * angstrom, b=1.0 * nanometer)\n\nmodel.model_dump_json()\n# '{\"a\": \"1.0 angstrom\", \"b\": \"1.0 nm\"}'\n</code></pre> <p>Backwards compatibility with Pydantic v1 is also maintained:</p> <pre><code>from pydantic.v1 import BaseModel\nfrom openmm.unit import Quantity, angstrom, nanometer\n\nfrom pydantic_units import quantity_serializer\nfrom pydantic_units.v1 import OpenMMQuantity\n\nclass Model(BaseModel):\n    class Config:\n        json_encoders = {Quantity: quantity_serializer}\n\n    a: OpenMMQuantity[angstrom]\n    b: OpenMMQuantity[nanometer]\n\nmodel = Model(a='1.0 angstrom', b='1.0 nm')\nmodel.json()\n# '{\"a\": \"1.0 angstrom\", \"b\": \"1.0 nm\"}'\n</code></pre>"},{"location":"development/","title":"Development","text":"<p>To create a development environment, you must have <code>mamba</code> installed.</p> <p>A development conda environment can be created and activated with:</p> <pre><code>make env\nconda activate pydantic-units\n</code></pre> <p>To format the codebase:</p> <pre><code>make format\n</code></pre> <p>To run the unit tests:</p> <pre><code>make test\n</code></pre> <p>To serve the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#pydantic_units","title":"pydantic_units","text":"<p>Support for OpenMM units as pydantic fields</p> <p>Modules:</p> <ul> <li> <code>v1</code>           \u2013            <p>OpenMM Quantity type for Pydantic v1.</p> </li> <li> <code>v2</code>           \u2013            <p>OpenMM Quantity type for Pydantic v2.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>OpenMMQuantity</code>           \u2013            <p>A pydantic safe OpenMM quantity type that validates unit compatibility.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>quantity_serializer</code>             \u2013              <p>Serialize a Quantity to a string</p> </li> </ul>"},{"location":"reference/#pydantic_units.OpenMMQuantity","title":"OpenMMQuantity","text":"<p>               Bases: <code>Quantity</code></p> <p>A pydantic safe OpenMM quantity type that validates unit compatibility.</p>"},{"location":"reference/#pydantic_units.quantity_serializer","title":"quantity_serializer","text":"<pre><code>quantity_serializer(value: Quantity) -&gt; str\n</code></pre> <p>Serialize a Quantity to a string</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>Quantity</code>)           \u2013            <p>The quantity to serialize</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The serialized string</p> </li> </ul> Source code in <code>pydantic_units/_common.py</code> <pre><code>def quantity_serializer(value: Quantity) -&gt; str:\n    \"\"\"Serialize a Quantity to a string\n\n    Args:\n        value: The quantity to serialize\n\n    Returns:\n        The serialized string\n    \"\"\"\n    unit_str = openmm_unit_to_string(value.unit)\n    return f\"{value.value_in_unit(value.unit):.8f} {unit_str}\"\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>pydantic_units<ul> <li>v1</li> <li>v2</li> </ul> </li> </ul>"},{"location":"reference/v1/","title":"v1","text":""},{"location":"reference/v1/#pydantic_units.v1","title":"v1","text":"<p>OpenMM Quantity type for Pydantic v1.</p> <p>Classes:</p> <ul> <li> <code>OpenMMQuantity</code>           \u2013            <p>A pydantic safe OpenMM quantity type that validates unit compatibility.</p> </li> </ul>"},{"location":"reference/v1/#pydantic_units.v1.OpenMMQuantity","title":"OpenMMQuantity","text":"<p>               Bases: <code>Quantity</code></p> <p>A pydantic safe OpenMM quantity type that validates unit compatibility.</p>"},{"location":"reference/v2/","title":"v2","text":""},{"location":"reference/v2/#pydantic_units.v2","title":"v2","text":"<p>OpenMM Quantity type for Pydantic v2.</p> <p>Classes:</p> <ul> <li> <code>OpenMMQuantity</code>           \u2013            <p>A pydantic safe OpenMM quantity type that validates unit compatibility.</p> </li> </ul>"},{"location":"reference/v2/#pydantic_units.v2.OpenMMQuantity","title":"OpenMMQuantity","text":"<p>               Bases: <code>Quantity</code></p> <p>A pydantic safe OpenMM quantity type that validates unit compatibility.</p>"}]}